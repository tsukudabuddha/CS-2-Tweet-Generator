"""Markov Chain."""
import random
from pprint import pprint
from dictogram import Dictogram


def total_count(histogram):
    """Return total number of words in histogram."""
    count = 0
    for key, value in histogram.items():
        count += value
    return count


def calculate_probablilites(histogram):
    """Calculate the probability per word and return histogram w/ values."""
    total = total_count(histogram)
    counter = 0
    new_histogram = {}
    for word, frequency in histogram.items():
        odds = (frequency / total)
        value = odds + counter
        new_histogram[word] = value
        counter += odds
    return new_histogram


def stochastic_sample(histogram):
    """Return randomly chosen item."""
    num_picker = random.random()
    for key, value in histogram.items():
        if num_picker < value:
            return key


def create_markov_dict(text):
    """Create Dictionary with key equal to tuple of words and value as a dictionary."""
    word_list = text.split(" ")
    markov_dict = {}

    for word_index in range(len(word_list) - 2):
        current_tuple = tuple((word_list[index]) for index in range(word_index, word_index + 2))
        next_word = word_list[word_index + 2]

        if current_tuple in markov_dict:
            markov_dict[current_tuple].add_count(next_word)
        else:
            markov_dict[current_tuple] = Dictogram([next_word])

    return(markov_dict)


def choose_starting_word(dictionary):
    """Choose random starting word."""
    word_list = []
    for key in dictionary:
        word_list.append(key)
    random_index = random.randint(0, len(word_list))
    return word_list[random_index]


def choose_next_word(dictionary):
    """Take dictionary to return next word."""
    probability_dict = calculate_probablilites(dictionary)
    return stochastic_sample(probability_dict)


def markov_chain(dictionary):
    """Return sentence generated by markov chain."""
    dict_keys = [key for key, value in dictionary.items()]
    sentence_list = list(dict_keys[random.randint(0, len(dict_keys) - 1)])

    for word_index in range(8):
        tuple_key = tuple((sentence_list[index]) for index in range(word_index, word_index + 2))
        if tuple_key in dictionary:
            word_dictogram = dictionary[tuple_key]
            next_word = choose_next_word(word_dictogram)
            sentence_list.append(next_word)
        else:
            break

    return ' '.join(sentence_list)


if __name__ == "__main__":
    text = 'one fish two fish red fish blue fish'
    markov_dict = create_markov_dict(text)
    print(markov_chain(markov_dict))
