"""Markov Chain."""
import random
from pprint import pprint


def total_count(histogram):
    """Return total number of words in histogram."""
    count = 0
    for key, value in histogram.items():
        count += value
    return count


def calculate_probablilites(histogram):
    """Calculate the probability per word and return histogram w/ values."""
    total = total_count(histogram)
    counter = 0
    new_histogram = {}
    for word, frequency in histogram.items():
        odds = (frequency / total)
        value = odds + counter
        new_histogram[word] = value
        counter += odds
    return new_histogram


def stochastic_sample(histogram):
    """Return randomly chosen item."""
    num_picker = random.random()
    for key, value in histogram.items():
        if num_picker < value:
            return key


def create_markov_dict(text):
    """Create Dictionary with key equal to word and value as a dictionary."""
    markov_dict = {}
    word_list = text.split(" ")
    for index in range(0, len(word_list) - 2):
        word = word_list[index]
        if word in markov_dict:
            next_dict = markov_dict[word]
            next_word = word_list[index + 1]
            if next_word in next_dict:
                next_dict[next_word] = next_dict[next_word] + 1
            else:
                next_dict[next_word] = 1
        else:
            key = word_list[index + 1]
            markov_dict[word] = {key: 1}
    pprint(markov_dict)
    return markov_dict


def choose_starting_word(dictionary):
    """Choose random starting word."""
    word_list = []
    for key, value in dictionary:
        word_list.append(key)
    random_index = random.randint(0, len(dictionary) - 1)
    return word_list[random_index]


def choose_next_word(dictionary):
    """Take dictionary to return next word."""
    probability_dict = calculate_probablilites(dictionary)
    return stochastic_sample(probability_dict)


def markov_chain(dictionary):
    """Return sentence generated by markov chain."""
    starting_word = choose_starting_word(dictionary)
    sentence = []
    for _ in range(0, 10):
        sentence.append(choose_next_word(dictionary[starting_word]))
    return " ".join(sentence)


if __name__ == "__main__":
    text = 'one fish two fish red fish blue fish'
    markov_dict = create_markov_dict(text)
    print(markov_chain(markov_dict))
